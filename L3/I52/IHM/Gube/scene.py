import tkinter as tk

"""Return a list of the coordonate of the grid
"""

def Creat_grid_list(size_scene,diag,wx,wy):
    #increment size scne for cube creation
    size_scene+=1
    decx=wx
    decy=wy/2
    diag_2=d*2
    l_case=[]
    x=diag*10
    for i in range(size_scene):
        for j in range(size_scene):
            x=decx+(j-i)*diag_2
            y=decy+(i+j)*diag
            l_i=[x,y, x+diag_2, y+diag,
                 x,y+diag_2, x-diag_2,y+diag,
                 x,y]
            l_case.append((l_i))
    return l_case

"""Summon a grid from a list, in a canvas
"""
def Summon_grid(Master,canvas,diag,size_scene):
    wy = Master.winfo_reqwidth()/2
    wx = Master.winfo_reqheight()
    l=Creat_grid_list(size_scene,diag,wx,wy)
    print(l)
    for i in range(size_scene+1,size_scene**2+size_scene*2+1):
        cnv.create_polygon(l[i],outline="#d79921",fill="#fbf1c7")
    cnv.pack(fill=tk.BOTH)

def Creat_a_gube_list(l_grid,x,y):
    up=l_grid[(x*y)-1]
    left=up[1:3],l_grid[(x+1)*(y+1)-1][2:]
    l_gube=[]
    return l_gube

Master=tk.Tk()
Master.attributes('-type', 'dialog')
#Creation Scene
l=[[200, 50.0, 220, 60.0, 200, 70.0, 180, 60.0, 200, 50.0], [220, 60.0, 240, 70.0, 220, 80.0, 200, 70.0, 220, 60.0], [240, 70.0, 260, 80.0, 240, 90.0, 220, 80.0, 240, 70.0], [260, 80.0, 280, 90.0, 260, 100.0, 240, 90.0, 260, 80.0], [280, 90.0, 300, 100.0, 280, 110.0, 260, 100.0, 280, 90.0], [300, 100.0, 320, 110.0, 300, 120.0, 280, 110.0, 300, 100.0], [320, 110.0, 340, 120.0, 320, 130.0, 300, 120.0, 320, 110.0], [340, 120.0, 360, 130.0, 340, 140.0, 320, 130.0, 340, 120.0], [360, 130.0, 380, 140.0, 360, 150.0, 340, 140.0, 360, 130.0], [180, 60.0, 200, 70.0, 180, 80.0, 160, 70.0, 180, 60.0], [200, 70.0, 220, 80.0, 200, 90.0, 180, 80.0, 200, 70.0], [220, 80.0, 240, 90.0, 220, 100.0, 200, 90.0, 220, 80.0], [240, 90.0, 260, 100.0, 240, 110.0, 220, 100.0, 240, 90.0], [260, 100.0, 280, 110.0, 260, 120.0, 240, 110.0, 260, 100.0], [280, 110.0, 300, 120.0, 280, 130.0, 260, 120.0, 280, 110.0], [300, 120.0, 320, 130.0, 300, 140.0, 280, 130.0, 300, 120.0], [320, 130.0, 340, 140.0, 320, 150.0, 300, 140.0, 320, 130.0], [340, 140.0, 360, 150.0, 340, 160.0, 320, 150.0, 340, 140.0], [160, 70.0, 180, 80.0, 160, 90.0, 140, 80.0, 160, 70.0], [180, 80.0, 200, 90.0, 180, 100.0, 160, 90.0, 180, 80.0], [200, 90.0, 220, 100.0, 200, 110.0, 180, 100.0, 200, 90.0], [220, 100.0, 240, 110.0, 220, 120.0, 200, 110.0, 220, 100.0], [240, 110.0, 260, 120.0, 240, 130.0, 220, 120.0, 240, 110.0], [260, 120.0, 280, 130.0, 260, 140.0, 240, 130.0, 260, 120.0], [280, 130.0, 300, 140.0, 280, 150.0, 260, 140.0, 280, 130.0], [300, 140.0, 320, 150.0, 300, 160.0, 280, 150.0, 300, 140.0], [320, 150.0, 340, 160.0, 320, 170.0, 300, 160.0, 320, 150.0], [140, 80.0, 160, 90.0, 140, 100.0, 120, 90.0, 140, 80.0], [160, 90.0, 180, 100.0, 160, 110.0, 140, 100.0, 160, 90.0], [180, 100.0, 200, 110.0, 180, 120.0, 160, 110.0, 180, 100.0], [200, 110.0, 220, 120.0, 200, 130.0, 180, 120.0, 200, 110.0], [220, 120.0, 240, 130.0, 220, 140.0, 200, 130.0, 220, 120.0], [240, 130.0, 260, 140.0, 240, 150.0, 220, 140.0, 240, 130.0], [260, 140.0, 280, 150.0, 260, 160.0, 240, 150.0, 260, 140.0], [280, 150.0, 300, 160.0, 280, 170.0, 260, 160.0, 280, 150.0], [300, 160.0, 320, 170.0, 300, 180.0, 280, 170.0, 300, 160.0], [120, 90.0, 140, 100.0, 120, 110.0, 100, 100.0, 120, 90.0], [140, 100.0, 160, 110.0, 140, 120.0, 120, 110.0, 140, 100.0], [160, 110.0, 180, 120.0, 160, 130.0, 140, 120.0, 160, 110.0], [180, 120.0, 200, 130.0, 180, 140.0, 160, 130.0, 180, 120.0], [200, 130.0, 220, 140.0, 200, 150.0, 180, 140.0, 200, 130.0], [220, 140.0, 240, 150.0, 220, 160.0, 200, 150.0, 220, 140.0], [240, 150.0, 260, 160.0, 240, 170.0, 220, 160.0, 240, 150.0], [260, 160.0, 280, 170.0, 260, 180.0, 240, 170.0, 260, 160.0], [280, 170.0, 300, 180.0, 280, 190.0, 260, 180.0, 280, 170.0], [100, 100.0, 120, 110.0, 100, 120.0, 80, 110.0, 100, 100.0], [120, 110.0, 140, 120.0, 120, 130.0, 100, 120.0, 120, 110.0], [140, 120.0, 160, 130.0, 140, 140.0, 120, 130.0, 140, 120.0], [160, 130.0, 180, 140.0, 160, 150.0, 140, 140.0, 160, 130.0], [180, 140.0, 200, 150.0, 180, 160.0, 160, 150.0, 180, 140.0], [200, 150.0, 220, 160.0, 200, 170.0, 180, 160.0, 200, 150.0], [220, 160.0, 240, 170.0, 220, 180.0, 200, 170.0, 220, 160.0], [240, 170.0, 260, 180.0, 240, 190.0, 220, 180.0, 240, 170.0], [260, 180.0, 280, 190.0, 260, 200.0, 240, 190.0, 260, 180.0], [80, 110.0, 100, 120.0, 80, 130.0, 60, 120.0, 80, 110.0], [100, 120.0, 120, 130.0, 100, 140.0, 80, 130.0, 100, 120.0], [120, 130.0, 140, 140.0, 120, 150.0, 100, 140.0, 120, 130.0], [140, 140.0, 160, 150.0, 140, 160.0, 120, 150.0, 140, 140.0], [160, 150.0, 180, 160.0, 160, 170.0, 140, 160.0, 160, 150.0], [180, 160.0, 200, 170.0, 180, 180.0, 160, 170.0, 180, 160.0], [200, 170.0, 220, 180.0, 200, 190.0, 180, 180.0, 200, 170.0], [220, 180.0, 240, 190.0, 220, 200.0, 200, 190.0, 220, 180.0], [240, 190.0, 260, 200.0, 240, 210.0, 220, 200.0, 240, 190.0], [60, 120.0, 80, 130.0, 60, 140.0, 40, 130.0, 60, 120.0], [80, 130.0, 100, 140.0, 80, 150.0, 60, 140.0, 80, 130.0], [100, 140.0, 120, 150.0, 100, 160.0, 80, 150.0, 100, 140.0], [120, 150.0, 140, 160.0, 120, 170.0, 100, 160.0, 120, 150.0], [140, 160.0, 160, 170.0, 140, 180.0, 120, 170.0, 140, 160.0], [160, 170.0, 180, 180.0, 160, 190.0, 140, 180.0, 160, 170.0], [180, 180.0, 200, 190.0, 180, 200.0, 160, 190.0, 180, 180.0], [200, 190.0, 220, 200.0, 200, 210.0, 180, 200.0, 200, 190.0], [220, 200.0, 240, 210.0, 220, 220.0, 200, 210.0, 220, 200.0], [40, 130.0, 60, 140.0, 40, 150.0, 20, 140.0, 40, 130.0], [60, 140.0, 80, 150.0, 60, 160.0, 40, 150.0, 60, 140.0], [80, 150.0, 100, 160.0, 80, 170.0, 60, 160.0, 80, 150.0], [100, 160.0, 120, 170.0, 100, 180.0, 80, 170.0, 100, 160.0], [120, 170.0, 140, 180.0, 120, 190.0, 100, 180.0, 120, 170.0], [140, 180.0, 160, 190.0, 140, 200.0, 120, 190.0, 140, 180.0], [160, 190.0, 180, 200.0, 160, 210.0, 140, 200.0, 160, 190.0], [180, 200.0, 200, 210.0, 180, 220.0, 160, 210.0, 180, 200.0], [200, 210.0, 220, 220.0, 200, 230.0, 180, 220.0, 200, 210.0]]
cnv=tk.Canvas(Master,background="#282828")
#add 1 for base because of shift
y=4
x=2
d=10
size_scene=8
cube_test=[]
up=0
Summon_grid(Master,cnv,d,size_scene)
up=l[((x-1)+((y-1)*(size_scene+1)))]
base=l[(x+((y*(size_scene+1))))]
print("up=",up)
left=up[2:4]+base[2:6]+up[4:6]
right=up[6:8]+base[6:8]+base[4:6]+up[4:6]
print("test=",left)
cnv.create_polygon(up,outline="#d79921",fill="#d3869b")
cnv.create_polygon(left,outline="#d79921",fill="#8f3f71")
#cnv.create_polygon(base,outline="#d79921",fill="#8f3f71")
cnv.create_polygon(right,outline="#d79921",fill="#8f3f71")

Master.mainloop()


